services:
  backend:
    build:
      context: .
      dockerfile: Backend.dockerfile
      target: production
    container_name: shared-media-streaming-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./envfiles/production.env
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongo:
    image: mongo:7.0
    container_name: shared-media-streaming-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - MONGO_INITDB_DATABASE=shared-media-streaming
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: shared-media-streaming-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  mongo-data:
  mongo-config:

networks:
  app-network:
    driver: bridge
